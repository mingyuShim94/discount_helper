## 패키지 매니저: npm 사용
- **모든 패키지 설치 및 관리는 npm을 사용하세요.**

---

## Next.js 개발: Route Handler 우선 사용
- **모든 API 엔드포인트는 Route Handler를 사용하여 구현하세요.**
- **데이터베이스 작업, 외부 API 호출, 인증 등 복잡한 서버 작업은 반드시 Route Handler를 사용하세요.**
- **Server Action은 단순 폼 제출 또는 간단한 데이터 처리에만 사용하세요.**

---

## UI 문서화: UI.md 유지보수
- **UI 컴포넌트를 추가, 수정 또는 삭제할 때마다 `docs/UI.md` 파일을 업데이트하세요.**
- **UI에 대한 중요한 변경사항이 있을 때는 텍스트 다이어그램을 수정하여 최신 상태를 유지하세요.**
- **특히 다음과 같은 변경 사항이 있을 때 반드시 업데이트해야 합니다:**
  - 새로운 컴포넌트 추가
  - 기존 컴포넌트의 UI 구조 변경
  - 컴포넌트 간 계층 관계 변경
  - 모바일/데스크톱 레이아웃 변경
  - 주요 UI 흐름 변경
- **UI.md는 시각적인 ASCII 다이어그램을 사용하여 레이아웃과 컴포넌트 구조를 표현해야 합니다.**
- **문서는 최신 상태를 유지하여 팀원 및 AI 도구가 프로젝트 구조를 쉽게 이해할 수 있도록 해야 합니다.**

---

## 코드 주석 및 구조화: 명확한 컴포넌트/기능 식별
- **모든 파일에서 주요 컴포넌트와 기능에 명확한 이름을 지정하고 주석으로 표시하세요.**
- **컴포넌트 상단에 목적과 주요 기능을 설명하는 주석을 추가하세요.**
- **큰 컴포넌트는 논리적 섹션으로 나누고 #region/#endregion 주석으로 구분하세요.**
- **복잡한 함수에는 목적, 인자, 반환값에 대한 설명을 포함하세요.**
- **주요 상태, 이벤트 핸들러, 계산 로직 등에 기능 설명 주석을 추가하세요.**

예시:
```typescript
/**
 * SearchBar 컴포넌트
 * 
 * 사용자가 매장을 검색할 수 있는 입력 필드와 자동 완성 기능을 제공합니다.
 * 검색 히스토리 저장 및 인기 검색어 표시 기능을 포함합니다.
 */
export function SearchBar({ onSearch, initialValue }: SearchBarProps) {
  // #region 상태 관리
  const [searchTerm, setSearchTerm] = useState(initialValue || '');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  // #endregion

  // #region 이벤트 핸들러
  /**
   * 검색어 변경 핸들러
   * 사용자 입력에 따라 검색어를 업데이트하고 자동완성 제안을 로드합니다.
   */
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // 핸들러 구현
  };
  // #endregion
  
  return (
    // 컴포넌트 렌더링 코드
  );
}
```

---

## ORM: Drizzle 사용
- **데이터베이스 작업을 위해 ORM으로 Drizzle을 사용하세요.**
- **Drizzle을 사용하여 데이터베이스 모델을 정의하고, CRUD 작업을 구현하세요.**

---

## Next.js 라우팅: App Router 사용
- **프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.**

---

## 컴포넌트 생성: ShadCN 우선 사용
- **모든 UI 컴포넌트는 ShadCN을 사용하여 생성하세요.**
- **컴포넌트 사용 전 설치 여부를 확인해야 합니다: `/components/ui` 디렉토리 체크**
- **컴포넌트 설치 명령어를 사용해야 합니다: `npx shadcn@latest add [component-name]`**
    - 주의: `npx shadcn-ui@latest add` 명령어는 deprecated. 반드시 `npx shadcn@latest add` 명령어를 사용해야 합니다.

---

## Icons
- 모든 아이콘은 Lucide React를 사용해야 합니다
- 아이콘 임포트 방법: `import { IconName } from "lucide-react"`
- 예시: `import { Search, Menu } from "lucide-react"`

## Component Structure
- 컴포넌트는 `/components` 디렉토리 내에 위치해야 합니다
- UI 컴포넌트는 `/components/ui` 디렉토리에 위치해야 합니다
- 페이지별 컴포넌트는 `/app` 디렉토리 내 해당 라우트에 위치해야 합니다

# Best Practices
- TypeScript 타입은 반드시 정의해야 합니다
- 컴포넌트는 재사용 가능하도록 설계해야 합니다


## TypeScript 사용: TS 사용 권장
- **프로젝트 전반에 TypeScript를 사용하세요.**
- **타입 안정성을 위해 모든 컴포넌트와 서버 로직에 TypeScript를 적용하세요.**

---

## TypeScript 인터페이스 정의 규칙: 'I' 접두사 사용
- **인터페이스 정의 시 이름 앞에 'I'를 접두사로 추가하세요.**
- 예시:
  ```typescript
  export interface IComment {
      id: string
      text: string
      author: string
  }
```

---

## 프로젝트 구조: 주요 폴더 구조
- **프로젝트 구조는 다음과 같이 설정하세요. `src` 폴더는 사용하지 않습니다.**

```
discount_helper/
├── app/                    # Next.js App Router 페이지
│   ├── store/              # 매장 관련 페이지
│   │   └── [id]/           # 개별 매장 페이지 (동적 라우팅)
│   ├── tips/               # 할인 팁 페이지
│   ├── contact/            # 문의 페이지
│   ├── sitemap.ts          # 사이트맵 자동 생성
│   └── robots.ts           # 검색엔진 크롤링 규칙
├── components/             # 컴포넌트
│   ├── discount/           # 할인 관련 컴포넌트
│   ├── ui/                 # UI 공통 컴포넌트 (ShadCN)
│   ├── layout/             # 레이아웃 컴포넌트
│   ├── tips/               # 할인 팁 컴포넌트
│   ├── analytics/          # 분석 관련 컴포넌트
│   ├── ads/                # 광고 관련 컴포넌트
│   └── store/              # 매장 관련 컴포넌트
├── lib/                    # 유틸리티 라이브러리
│   ├── data/               # 정적 데이터 (매장 정보, 할인 정책 등)
│   └── discount/           # 할인 관련 유틸리티
├── utils/                  # 유틸리티 함수
│   ├── discountCalculator.ts # 할인 계산 관련 함수 모음
│   └── discountUtils.ts      # 할인 유틸리티 함수
├── types/                  # TypeScript 타입 정의
│   ├── discount.ts         # 할인 관련 타입
│   ├── discountFilter.ts   # 할인 필터 관련 타입
│   └── store.ts            # 매장 관련 타입
├── hooks/                  # React 커스텀 훅
│   └── useMediaQuery.ts    # 반응형 UI를 위한 미디어 쿼리 훅
├── public/                 # 정적 파일
├── docs/                   # 문서화 파일
│   ├── UI.md               # UI 구조 문서화 (ASCII 다이어그램)
│   ├── file_disciption.md  # 코드 구조 및 파일 설명
│   └── SEO_GUIDE.md        # SEO 최적화 가이드
├── middleware.ts           # 미들웨어 설정 파일
├── .env                    # 환경 변수 설정 파일
├── .eslintrc.js            # ESLint 설정 파일
├── .gitignore              # Git 무시할 파일 설정
├── next.config.js          # Next.js 설정 파일
├── package.json            # 프로젝트 패키지 정보
├── tsconfig.json           # TypeScript 설정 파일
└── README.md               # 프로젝트 설명 문서
```

